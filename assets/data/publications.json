[
{
  "selected": false,
  "topic": "rl_syn",
  "media": {
    "type": "image",
    "src": "assets/images/research/FYP.jpeg"
  },
  "details": {
    "title": "AI-Driven Smart Shopping Cart",
    "authors": [
      {
        "name": "Muhammad Usman Khanzada",
        "href": "",
        "strong": true
      },
      { "name": "Yusra Ahmed", "href": "https://www.linkedin.com/in/yusraahmed02/", "strong": false }

    ],
    "venue":"Developed an Android application for barcode scanning, product display, real-time recommendations, and theft protection using weight sensors and ESP32, integrated with Machine Learning models. Aimed to simplify grocery shopping and deliver a seamless smart-cart experience.",
    "links": [
      {
        "label": "poster",
        "href": "assets/images/research/FYP.jpeg"
      }
    ]
  }
}
,
    {
      "selected": true,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/cifar.png"
      },
      "details": {
        "title": "CIFAR-100 Transfer and Scratch Learning",
        "authors": [
          { "name": "Muhammad Usman Khanzada",        "href": "", "strong": true  }
        ],
        
        "venue": "Achieved 71.2% test accuracy through scratch training on CIFAR-100, surpassing the literature benchmark of 67%. Performed transfer learning on the same dataset using imagenet weights, architecture EfficientNetB0 which gave 86% test accuracy.",
        "links": [
          { "label": "Dataset", "href": "https://www.cs.toronto.edu/~kriz/cifar.html" },
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/Cifar100" }
          ]
      }
    },
    {
      "selected": true,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/autoencoders.png"
      },
      "details": {
        "title": "Binary Classification using Autoencoders",
        "authors": [
          { "name": "Muhammad Usman Khanzada","href": "", "strong": true  }
        ],
        "venue": "This project uses a convolutional autoencoder combined with reconstruction error analysis and Kernel Density Estimation (KDE) to classify images of trolleys as empty (normal) or not empty (anomalous).",
        "links": [
          { "label": "Dataset", "href": "https://drive.google.com/drive/folders/14qtb_QxzKBdz9-ScAGUs_Mcx6z_D08J2" },
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/Binary-Classification-using-Autoecoders" }
          
        ]
      }
    },
    {
      "selected": true,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/gmms.png"
      },
      "details": {
        "title": "Speaker Recognition Using GMMs",
        "authors": [
          { "name": "Ahsan Bilal",     "href": "", "strong": true  }
        ],
        "venue": "Build a speaker recognition system by extracting MFCC features from audio files and modeling speaker characteristics using Gaussian Mixture Models (GMM). This project focuses on speaker identification, where the system assigns a test utterance to one of several known speakers.",
        "links": [
          { "label": "Dataset", "href": "" },
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/Speaker_Recognition_Using_GMMs" }
          ]

      }
      
    },
    {
      "selected": true,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/yolov8.jpg"
      },
      "details": {
        "title": "Fruit Picking Robot Simulation",
        "authors": [
          { "name": "Muhammad Usman Khanzada","href": null, "strong": true  }
        ],
        "venue": "Developed simulation of a fruit-picking robot using Webots, integrating a camera to capture images processed with Python and YOLOv8 for fruit location identification.Implemented precise fruit-picking and placement into a basket by centering the fruit on the manipulator.",
        "links": [
          { "label": "Dataset", "href": "" }, 
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/-Fruit-Picking-Robot-Simulation" }
          ]
      }
    },
    {
      "selected": false,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/circuit.jpg"
      },
      "details": {
        "title": "Arduino Based Health Monitoring System",
        "authors": [
          { "name": "Muhammad Usman khanzada", "href": "", "strong": true  }
        ],
        "venue": "This project is a real-time IoT-based health monitoring system using an Arduino, multiple biomedical sensors (ECG, temperature, and pulse), and the ESP8266 Wi-Fi module. It continuously measures patient vitals, sends the data to an IoT platform, and displays the current readings on an LCD screen.",

        "links": [
          { "label": "Dataset", "href": "" }, 
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/ArduinoHealthMonitor" }
          ]
      }
    },
    {
      "selected": false,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/tinyml.png"
      },
      "details": {
        "title": "TinyML on AVR",
        "authors": [
          { "name": "Muhammad Usman Khanzada","href": "", "strong": true  }
        ],
        "venue": "A system that takes room temperature as input and calibrates the sensor using Machine Learning model. Displays the temperature on both PC and seven-segment display.",
        "links": [
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/-TinyML-on-AVR" }]
      }
    },
    {
      "selected": false,
      "topic": "",
      "media": {
        "type": "image",
        "src": "assets/images/research/socket.png",
        "format": ""
      },
      "details": {
        "title": "Client-Server Communcation Chat Application Using Python",
        "authors": [
          { "name": "Muhammad Usman Khanzada",      "href": "", "strong": true  }
        ],
        "venue": "A chat application was created using Python socket programming, a client-side GUI, and a server-side database to store the information about all its clients.",

        "links": [
          { "label": "Repo", "href": "https://github.com/MUsmankhanzada/Client-Server-Chat-Application-Python" }]
      }
    }
  ]
  